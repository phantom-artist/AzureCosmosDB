package com.phantomartist.azure.cosmosdb;

import com.phantomartist.azure.cosmosdb.results.OnComplete;
import com.phantomartist.azure.cosmosdb.results.OnError;
import com.phantomartist.azure.cosmosdb.results.OnPage;

/**
 * Title: CosmosDBQuery
 *
 * Description: Represents a query in CosmosDB
 */
public interface Query {

    /**
     * Set the blocking flag. (Default if not set, is false).
     * If set, the query will block until completion rather than returning immediately.
     * 
     * @param isBlocking if true, query blocks until completion
     * 
     * @return Query this query
     */
    Query setBlocking( final boolean isBlocking );
    
    /**
     * Setting this parameter will limit the number of results returned
     * in a single page of results.
     * 
     * Default value is 1000.
     * 
     * Setting to a negative value will disable the default and return 
     * all matching results in a single page.
     * 
     * @param maxFetchResults the max results to fetch
     * 
     * @return Query this query
     */
    Query setMaxResultsPageSize( final int maxFetchResults );
    
    /**
     * If set, informs the query which db partition the query should be
     * directed to (for faster execution). If no partition key is specified
     * the query defaults to a cross-partition query (slower).
     *  
     * @param partitionKey the partition key
     * 
     * @return Query this query
     */
    Query setPartitionKey( final String partitionKey );
    
    /**
     * Add a param name/value pair to the query
     * 
     * @param name the name
     * @param value the value
     * 
     * @return Query this query
     */
    Query addParam( final String name, final Object value );
    
    /**
     * Execute query with no explicit onError or onComplete. 
     * If using a blocking query, default is to stop blocking when all results received
     * (when onComplete fires).
     * 
     * If {@link #setBlocking(boolean)} is true, this method will block until an error
     * is detected, or the default onComplete action fires.
     * 
     * Assumes default actions for error and completion handling. This is potentially 
     * dangerous in a production scenario as the caller has no way of interacting with 
     * and propagating an exception generated by the client to other code.
     * The exception is essentially logged and 'swallowed' by this call. 
     * 
     * You have been warned!
     * 
     * @param onPage action to perform when results arrive
     */
    void execute( final OnPage onPage );
    
    /**
     * Execute query with no explicit onComplete. If using a blocking query, default is to 
     * stop blocking when all results received.
     * 
     * If {@link #setBlocking(boolean)} is true, this method will block until completion.
     * 
     * @param onPage action to perform when results arrive
     * @param onError action to perform if error occurs
     */
    void execute( final OnPage onPage, final OnError onError );
    
    /**
     * Execute query.
     * 
     * If {@link #setBlocking(boolean)} is true, this method will block until completion.
     * 
     * @param onPage what to do when a page of results arrives
     * @param onError what to do when an error occurs
     * @param onComplete what to do when operation completes
     */
    void execute( final OnPage onPage, final OnError onError, final OnComplete onComplete );
}
